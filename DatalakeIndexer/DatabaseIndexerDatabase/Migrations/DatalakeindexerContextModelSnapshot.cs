// <auto-generated />
using System;
using DatabaseIndexerDatabase.GeneratedDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseIndexerDatabase.Migrations
{
    [DbContext(typeof(DatalakeindexerContext))]
    partial class DatalakeindexerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseIndexerDatabase.GeneratedDatabase.Paths", b =>
                {
                    b.Property<byte[]>("PathKey")
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)")
                        .IsFixedLength();

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ETag")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FilesystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Path_reversed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComputedColumnSql("(reverse([Path]))", false);

                    b.HasKey("PathKey");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("PathKey"), false);

                    b.HasIndex(new[] { "FilesystemName", "Path_reversed" }, "filesystem_path_reversed");

                    b.HasIndex(new[] { "FilesystemName", "Path" }, "path_filesystem_unique");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "FilesystemName", "Path" }, "path_filesystem_unique"));

                    b.HasIndex(new[] { "PathKey" }, "path_key")
                        .IsUnique();

                    b.ToTable("Paths");
                });

            modelBuilder.Entity("DatabaseIndexerDatabase.GeneratedDatabase.PathsMetadata", b =>
                {
                    b.Property<byte[]>("PathKey")
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)")
                        .IsFixedLength();

                    b.Property<string>("MetadataJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PathKey");

                    b.ToTable("PathsMetadata");
                });
#pragma warning restore 612, 618
        }
    }
}
